# This was automatically generated by the FlatBuffers compiler, do not modify

type MyGame.Example.Color = int

namespace MyGame.Example.Color {
  const Red = 1 as MyGame.Example.Color
  const Green = 2 as MyGame.Example.Color
  const Blue = 8 as MyGame.Example.Color
}

type MyGame.Example.Any = int

namespace MyGame.Example.Any {
  const NONE = 0 as MyGame.Example.Any
  const Monster = 1 as MyGame.Example.Any
  const TestSimpleTableWithEnum = 2 as MyGame.Example.Any
}

type MyGame.Example.Test : int {
  def a(bb FlatBuffers.ByteBuffer) int {
    return bb.readInt16((self as int) + 0)
  }

  def b(bb FlatBuffers.ByteBuffer) int {
    return bb.readInt8((self as int) + 2)
  }
}

namespace MyGame.Example.Test {
  const NULL = 0 as MyGame.Example.Test

  def createTest(builder FlatBuffers.Builder, a int, b int) FlatBuffers.Offset<MyGame.Example.Test> {
    builder.prep(2, 4)
    builder.pad(1)
    builder.writeInt8(b)
    builder.writeInt16(a)
    return builder.offset as FlatBuffers.Offset<MyGame.Example.Test>
  }
}

type MyGame.Example.TestSimpleTableWithEnum : int {
  def color(bb FlatBuffers.ByteBuffer) MyGame.Example.Color {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readInt8((self as int) + offset) as MyGame.Example.Color : MyGame.Example.Color.Green
  }
}

namespace MyGame.Example.TestSimpleTableWithEnum {
  const NULL = 0 as MyGame.Example.TestSimpleTableWithEnum

  def getRootAsTestSimpleTableWithEnum(bb FlatBuffers.ByteBuffer) TestSimpleTableWithEnum {
    return (bb.readInt32(bb.position) + bb.position) as TestSimpleTableWithEnum
  }

  def startTestSimpleTableWithEnum(builder FlatBuffers.Builder) {
    builder.startObject(1)
  }

  def addColor(builder FlatBuffers.Builder, color MyGame.Example.Color) {
    builder.addFieldInt8(0, color as int, MyGame.Example.Color.Green as int)
  }

  def endTestSimpleTableWithEnum(builder FlatBuffers.Builder) FlatBuffers.Offset<MyGame.Example.TestSimpleTableWithEnum> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<MyGame.Example.TestSimpleTableWithEnum>
  }
}

type MyGame.Example.Vec3 : int {
  def x(bb FlatBuffers.ByteBuffer) double {
    return bb.readFloat32((self as int) + 0)
  }

  def y(bb FlatBuffers.ByteBuffer) double {
    return bb.readFloat32((self as int) + 4)
  }

  def z(bb FlatBuffers.ByteBuffer) double {
    return bb.readFloat32((self as int) + 8)
  }

  def test1(bb FlatBuffers.ByteBuffer) double {
    return bb.readFloat64((self as int) + 16)
  }

  def test2(bb FlatBuffers.ByteBuffer) MyGame.Example.Color {
    return bb.readInt8((self as int) + 24) as MyGame.Example.Color
  }

  def test3(bb FlatBuffers.ByteBuffer) MyGame.Example.Test {
    return ((self as int) + 26) as MyGame.Example.Test
  }
}

namespace MyGame.Example.Vec3 {
  const NULL = 0 as MyGame.Example.Vec3

  def createVec3(builder FlatBuffers.Builder, x double, y double, z double, test1 double, test2 MyGame.Example.Color, test3_a int, test3_b int) FlatBuffers.Offset<MyGame.Example.Vec3> {
    builder.prep(16, 32)
    builder.pad(2)
    builder.prep(2, 4)
    builder.pad(1)
    builder.writeInt8(test3_b)
    builder.writeInt16(test3_a)
    builder.pad(1)
    builder.writeInt8(test2 as int)
    builder.writeFloat64(test1)
    builder.pad(4)
    builder.writeFloat32(z)
    builder.writeFloat32(y)
    builder.writeFloat32(x)
    return builder.offset as FlatBuffers.Offset<MyGame.Example.Vec3>
  }
}

type MyGame.Example.Stat : int {
  def id(bb FlatBuffers.ByteBuffer) string {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readString((self as int) + offset) : null
  }

  def val(bb FlatBuffers.ByteBuffer) FlatBuffers.Long {
    var offset = bb.readOffset(self as int, 6)
    return offset != 0 ? bb.readInt64((self as int) + offset) : .ZERO
  }

  def count(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 8)
    return offset != 0 ? bb.readUint16((self as int) + offset) : 0
  }
}

namespace MyGame.Example.Stat {
  const NULL = 0 as MyGame.Example.Stat

  def getRootAsStat(bb FlatBuffers.ByteBuffer) Stat {
    return (bb.readInt32(bb.position) + bb.position) as Stat
  }

  def startStat(builder FlatBuffers.Builder) {
    builder.startObject(3)
  }

  def addId(builder FlatBuffers.Builder, idOffset FlatBuffers.Offset<string>) {
    builder.addFieldOffset(0, idOffset as int, 0)
  }

  def addVal(builder FlatBuffers.Builder, val FlatBuffers.Long) {
    builder.addFieldInt64(1, val, .ZERO)
  }

  def addCount(builder FlatBuffers.Builder, count int) {
    builder.addFieldInt16(2, count, 0)
  }

  def endStat(builder FlatBuffers.Builder) FlatBuffers.Offset<MyGame.Example.Stat> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<MyGame.Example.Stat>
  }
}

# an example documentation comment: monster object
type MyGame.Example.Monster : int {
  def pos(bb FlatBuffers.ByteBuffer) MyGame.Example.Vec3 {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? ((self as int) + offset) as MyGame.Example.Vec3 : .NULL
  }

  def mana(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 6)
    return offset != 0 ? bb.readInt16((self as int) + offset) : 150
  }

  def hp(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 8)
    return offset != 0 ? bb.readInt16((self as int) + offset) : 100
  }

  def name(bb FlatBuffers.ByteBuffer) string {
    var offset = bb.readOffset(self as int, 10)
    return offset != 0 ? bb.readString((self as int) + offset) : null
  }

  def inventory(bb FlatBuffers.ByteBuffer, index int) int {
    var offset = bb.readOffset(self as int, 14)
    return offset != 0 ? bb.readUint8(bb.readVector((self as int) + offset) + index * 1) : 0
  }

  def inventoryLength(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 14)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }

  def color(bb FlatBuffers.ByteBuffer) MyGame.Example.Color {
    var offset = bb.readOffset(self as int, 16)
    return offset != 0 ? bb.readInt8((self as int) + offset) as MyGame.Example.Color : MyGame.Example.Color.Blue
  }

  def testType(bb FlatBuffers.ByteBuffer) MyGame.Example.Any {
    var offset = bb.readOffset(self as int, 18)
    return offset != 0 ? bb.readUint8((self as int) + offset) as MyGame.Example.Any : MyGame.Example.Any.NONE
  }

  def test(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 20)
    return offset != 0 ? bb.readUnion((self as int) + offset) : 0
  }

  def test4(bb FlatBuffers.ByteBuffer, index int) MyGame.Example.Test {
    var offset = bb.readOffset(self as int, 22)
    return offset != 0 ? (bb.readVector((self as int) + offset) + index * 4) as MyGame.Example.Test : .NULL
  }

  def test4Length(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 22)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }

  def testarrayofstring(bb FlatBuffers.ByteBuffer, index int) string {
    var offset = bb.readOffset(self as int, 24)
    return offset != 0 ? bb.readString(bb.readVector((self as int) + offset) + index * 4) : null
  }

  def testarrayofstringLength(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 24)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }

  # an example documentation comment: this will end up in the generated code
  # multiline too
  def testarrayoftables(bb FlatBuffers.ByteBuffer, index int) MyGame.Example.Monster {
    var offset = bb.readOffset(self as int, 26)
    return offset != 0 ? bb.readIndirect(bb.readVector((self as int) + offset) + index * 4) as MyGame.Example.Monster : .NULL
  }

  def testarrayoftablesLength(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 26)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }

  def enemy(bb FlatBuffers.ByteBuffer) MyGame.Example.Monster {
    var offset = bb.readOffset(self as int, 28)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as MyGame.Example.Monster : .NULL
  }

  def testnestedflatbuffer(bb FlatBuffers.ByteBuffer, index int) int {
    var offset = bb.readOffset(self as int, 30)
    return offset != 0 ? bb.readUint8(bb.readVector((self as int) + offset) + index * 1) : 0
  }

  def testnestedflatbufferLength(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 30)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }

  def testempty(bb FlatBuffers.ByteBuffer) MyGame.Example.Stat {
    var offset = bb.readOffset(self as int, 32)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as MyGame.Example.Stat : .NULL
  }

  def testbool(bb FlatBuffers.ByteBuffer) bool {
    var offset = bb.readOffset(self as int, 34)
    return offset != 0 ? bb.readInt8((self as int) + offset) as bool : false
  }

  def testhashs32Fnv1(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 36)
    return offset != 0 ? bb.readInt32((self as int) + offset) : 0
  }

  def testhashu32Fnv1(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 38)
    return offset != 0 ? bb.readUint32((self as int) + offset) : 0
  }

  def testhashs64Fnv1(bb FlatBuffers.ByteBuffer) FlatBuffers.Long {
    var offset = bb.readOffset(self as int, 40)
    return offset != 0 ? bb.readInt64((self as int) + offset) : .ZERO
  }

  def testhashu64Fnv1(bb FlatBuffers.ByteBuffer) FlatBuffers.Long {
    var offset = bb.readOffset(self as int, 42)
    return offset != 0 ? bb.readUint64((self as int) + offset) : .ZERO
  }

  def testhashs32Fnv1a(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 44)
    return offset != 0 ? bb.readInt32((self as int) + offset) : 0
  }

  def testhashu32Fnv1a(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 46)
    return offset != 0 ? bb.readUint32((self as int) + offset) : 0
  }

  def testhashs64Fnv1a(bb FlatBuffers.ByteBuffer) FlatBuffers.Long {
    var offset = bb.readOffset(self as int, 48)
    return offset != 0 ? bb.readInt64((self as int) + offset) : .ZERO
  }

  def testhashu64Fnv1a(bb FlatBuffers.ByteBuffer) FlatBuffers.Long {
    var offset = bb.readOffset(self as int, 50)
    return offset != 0 ? bb.readUint64((self as int) + offset) : .ZERO
  }

  def testarrayofbools(bb FlatBuffers.ByteBuffer, index int) bool {
    var offset = bb.readOffset(self as int, 52)
    return offset != 0 ? bb.readInt8(bb.readVector((self as int) + offset) + index * 1) as bool : false
  }

  def testarrayofboolsLength(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 52)
    return offset != 0 ? bb.readVectorLength((self as int) + offset) : 0
  }
}

namespace MyGame.Example.Monster {
  const NULL = 0 as MyGame.Example.Monster

  def getRootAsMonster(bb FlatBuffers.ByteBuffer) Monster {
    return (bb.readInt32(bb.position) + bb.position) as Monster
  }

  def bufferHasIdentifier(bb FlatBuffers.ByteBuffer) bool {
    return bb.hasIdentifier("MONS")
  }

  def startMonster(builder FlatBuffers.Builder) {
    builder.startObject(25)
  }

  def addPos(builder FlatBuffers.Builder, posOffset FlatBuffers.Offset<MyGame.Example.Vec3>) {
    builder.addFieldStruct(0, posOffset as int, 0)
  }

  def addMana(builder FlatBuffers.Builder, mana int) {
    builder.addFieldInt16(1, mana, 150)
  }

  def addHp(builder FlatBuffers.Builder, hp int) {
    builder.addFieldInt16(2, hp, 100)
  }

  def addName(builder FlatBuffers.Builder, nameOffset FlatBuffers.Offset<string>) {
    builder.addFieldOffset(3, nameOffset as int, 0)
  }

  def addInventory(builder FlatBuffers.Builder, inventoryOffset FlatBuffers.Offset<List<int>>) {
    builder.addFieldOffset(5, inventoryOffset as int, 0)
  }

  def createInventoryVector(builder FlatBuffers.Builder, data List<int>) FlatBuffers.Offset<List<int>> {
    builder.startVector(1, data.count, 1)
    for i = data.count - 1; i >= 0; i-- {
      builder.addInt8(data[i])
    }
    return builder.endVector as FlatBuffers.Offset<List<int>>
  }

  def startInventoryVector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(1, numElems, 1)
  }

  def endInventoryVector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<int>>{
    return builder.endVector as FlatBuffers.Offset<List<int>>
  }

  def addColor(builder FlatBuffers.Builder, color MyGame.Example.Color) {
    builder.addFieldInt8(6, color as int, MyGame.Example.Color.Blue as int)
  }

  def addTestType(builder FlatBuffers.Builder, testType MyGame.Example.Any) {
    builder.addFieldInt8(7, testType as int, MyGame.Example.Any.NONE as int)
  }

  def addTest(builder FlatBuffers.Builder, testOffset MyGame.Example.Any) {
    builder.addFieldOffset(8, testOffset as int, 0)
  }

  def addTest4(builder FlatBuffers.Builder, test4Offset FlatBuffers.Offset<List<MyGame.Example.Test>>) {
    builder.addFieldOffset(9, test4Offset as int, 0)
  }

  def startTest4Vector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(4, numElems, 2)
  }

  def endTest4Vector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<MyGame.Example.Test>>{
    return builder.endVector as FlatBuffers.Offset<List<MyGame.Example.Test>>
  }

  def addTestarrayofstring(builder FlatBuffers.Builder, testarrayofstringOffset FlatBuffers.Offset<List<string>>) {
    builder.addFieldOffset(10, testarrayofstringOffset as int, 0)
  }

  def createTestarrayofstringVector(builder FlatBuffers.Builder, data List<FlatBuffers.Offset<string>>) FlatBuffers.Offset<List<string>> {
    builder.startVector(4, data.count, 4)
    for i = data.count - 1; i >= 0; i-- {
      builder.addOffset(data[i] as int)
    }
    return builder.endVector as FlatBuffers.Offset<List<string>>
  }

  def startTestarrayofstringVector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(4, numElems, 4)
  }

  def endTestarrayofstringVector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<string>>{
    return builder.endVector as FlatBuffers.Offset<List<string>>
  }

  def addTestarrayoftables(builder FlatBuffers.Builder, testarrayoftablesOffset FlatBuffers.Offset<List<MyGame.Example.Monster>>) {
    builder.addFieldOffset(11, testarrayoftablesOffset as int, 0)
  }

  def createTestarrayoftablesVector(builder FlatBuffers.Builder, data List<FlatBuffers.Offset<MyGame.Example.Monster>>) FlatBuffers.Offset<List<MyGame.Example.Monster>> {
    builder.startVector(4, data.count, 4)
    for i = data.count - 1; i >= 0; i-- {
      builder.addOffset(data[i] as int)
    }
    return builder.endVector as FlatBuffers.Offset<List<MyGame.Example.Monster>>
  }

  def startTestarrayoftablesVector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(4, numElems, 4)
  }

  def endTestarrayoftablesVector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<MyGame.Example.Monster>>{
    return builder.endVector as FlatBuffers.Offset<List<MyGame.Example.Monster>>
  }

  def addEnemy(builder FlatBuffers.Builder, enemyOffset FlatBuffers.Offset<MyGame.Example.Monster>) {
    builder.addFieldOffset(12, enemyOffset as int, 0)
  }

  def addTestnestedflatbuffer(builder FlatBuffers.Builder, testnestedflatbufferOffset FlatBuffers.Offset<List<int>>) {
    builder.addFieldOffset(13, testnestedflatbufferOffset as int, 0)
  }

  def createTestnestedflatbufferVector(builder FlatBuffers.Builder, data List<int>) FlatBuffers.Offset<List<int>> {
    builder.startVector(1, data.count, 1)
    for i = data.count - 1; i >= 0; i-- {
      builder.addInt8(data[i])
    }
    return builder.endVector as FlatBuffers.Offset<List<int>>
  }

  def startTestnestedflatbufferVector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(1, numElems, 1)
  }

  def endTestnestedflatbufferVector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<int>>{
    return builder.endVector as FlatBuffers.Offset<List<int>>
  }

  def addTestempty(builder FlatBuffers.Builder, testemptyOffset FlatBuffers.Offset<MyGame.Example.Stat>) {
    builder.addFieldOffset(14, testemptyOffset as int, 0)
  }

  def addTestbool(builder FlatBuffers.Builder, testbool bool) {
    builder.addFieldInt8(15, testbool as int, 0)
  }

  def addTesthashs32Fnv1(builder FlatBuffers.Builder, testhashs32Fnv1 int) {
    builder.addFieldInt32(16, testhashs32Fnv1, 0)
  }

  def addTesthashu32Fnv1(builder FlatBuffers.Builder, testhashu32Fnv1 int) {
    builder.addFieldInt32(17, testhashu32Fnv1, 0)
  }

  def addTesthashs64Fnv1(builder FlatBuffers.Builder, testhashs64Fnv1 FlatBuffers.Long) {
    builder.addFieldInt64(18, testhashs64Fnv1, .ZERO)
  }

  def addTesthashu64Fnv1(builder FlatBuffers.Builder, testhashu64Fnv1 FlatBuffers.Long) {
    builder.addFieldInt64(19, testhashu64Fnv1, .ZERO)
  }

  def addTesthashs32Fnv1a(builder FlatBuffers.Builder, testhashs32Fnv1a int) {
    builder.addFieldInt32(20, testhashs32Fnv1a, 0)
  }

  def addTesthashu32Fnv1a(builder FlatBuffers.Builder, testhashu32Fnv1a int) {
    builder.addFieldInt32(21, testhashu32Fnv1a, 0)
  }

  def addTesthashs64Fnv1a(builder FlatBuffers.Builder, testhashs64Fnv1a FlatBuffers.Long) {
    builder.addFieldInt64(22, testhashs64Fnv1a, .ZERO)
  }

  def addTesthashu64Fnv1a(builder FlatBuffers.Builder, testhashu64Fnv1a FlatBuffers.Long) {
    builder.addFieldInt64(23, testhashu64Fnv1a, .ZERO)
  }

  def addTestarrayofbools(builder FlatBuffers.Builder, testarrayofboolsOffset FlatBuffers.Offset<List<bool>>) {
    builder.addFieldOffset(24, testarrayofboolsOffset as int, 0)
  }

  def createTestarrayofboolsVector(builder FlatBuffers.Builder, data List<bool>) FlatBuffers.Offset<List<bool>> {
    builder.startVector(1, data.count, 1)
    for i = data.count - 1; i >= 0; i-- {
      builder.addInt8(data[i] as int)
    }
    return builder.endVector as FlatBuffers.Offset<List<bool>>
  }

  def startTestarrayofboolsVector(builder FlatBuffers.Builder, numElems int) {
    builder.startVector(1, numElems, 1)
  }

  def endTestarrayofboolsVector(builder FlatBuffers.Builder) FlatBuffers.Offset<List<bool>>{
    return builder.endVector as FlatBuffers.Offset<List<bool>>
  }

  def endMonster(builder FlatBuffers.Builder) FlatBuffers.Offset<MyGame.Example.Monster> {
    var offset = builder.endObject
    builder.requiredField(offset, 10) # name
    return offset as FlatBuffers.Offset<MyGame.Example.Monster>
  }

  def finishMonsterBuffer(builder FlatBuffers.Builder, offset FlatBuffers.Offset<MyGame.Example.Monster>) {
    builder.finish(offset as int, "MONS")
  }
}
