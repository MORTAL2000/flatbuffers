# This was automatically generated by the FlatBuffers compiler, do not modify

type NamespaceA.TableInFirstNS : int {
  def fooTable(bb FlatBuffers.ByteBuffer) NamespaceA.NamespaceB.TableInNestedNS {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as NamespaceA.NamespaceB.TableInNestedNS : .NULL
  }

  def fooEnum(bb FlatBuffers.ByteBuffer) NamespaceA.NamespaceB.EnumInNestedNS {
    var offset = bb.readOffset(self as int, 6)
    return offset != 0 ? bb.readInt8((self as int) + offset) as NamespaceA.NamespaceB.EnumInNestedNS : NamespaceA.NamespaceB.EnumInNestedNS.A
  }

  def fooStruct(bb FlatBuffers.ByteBuffer) NamespaceA.NamespaceB.StructInNestedNS {
    var offset = bb.readOffset(self as int, 8)
    return offset != 0 ? ((self as int) + offset) as NamespaceA.NamespaceB.StructInNestedNS : .NULL
  }
}

namespace NamespaceA.TableInFirstNS {
  const NULL = 0 as NamespaceA.TableInFirstNS

  def getRootAsTableInFirstNS(bb FlatBuffers.ByteBuffer) TableInFirstNS {
    return (bb.readInt32(bb.position) + bb.position) as TableInFirstNS
  }

  def startTableInFirstNS(builder FlatBuffers.Builder) {
    builder.startObject(3)
  }

  def addFooTable(builder FlatBuffers.Builder, fooTableOffset FlatBuffers.Offset<NamespaceA.NamespaceB.TableInNestedNS>) {
    builder.addFieldOffset(0, fooTableOffset as int, 0)
  }

  def addFooEnum(builder FlatBuffers.Builder, fooEnum NamespaceA.NamespaceB.EnumInNestedNS) {
    builder.addFieldInt8(1, fooEnum as int, NamespaceA.NamespaceB.EnumInNestedNS.A as int)
  }

  def addFooStruct(builder FlatBuffers.Builder, fooStructOffset FlatBuffers.Offset<NamespaceA.NamespaceB.StructInNestedNS>) {
    builder.addFieldStruct(2, fooStructOffset as int, 0)
  }

  def endTableInFirstNS(builder FlatBuffers.Builder) FlatBuffers.Offset<NamespaceA.TableInFirstNS> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<NamespaceA.TableInFirstNS>
  }
}

type NamespaceC.TableInC : int {
  def referToA1(bb FlatBuffers.ByteBuffer) NamespaceA.TableInFirstNS {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as NamespaceA.TableInFirstNS : .NULL
  }

  def referToA2(bb FlatBuffers.ByteBuffer) NamespaceA.SecondTableInA {
    var offset = bb.readOffset(self as int, 6)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as NamespaceA.SecondTableInA : .NULL
  }
}

namespace NamespaceC.TableInC {
  const NULL = 0 as NamespaceC.TableInC

  def getRootAsTableInC(bb FlatBuffers.ByteBuffer) TableInC {
    return (bb.readInt32(bb.position) + bb.position) as TableInC
  }

  def startTableInC(builder FlatBuffers.Builder) {
    builder.startObject(2)
  }

  def addReferToA1(builder FlatBuffers.Builder, referToA1Offset FlatBuffers.Offset<NamespaceA.TableInFirstNS>) {
    builder.addFieldOffset(0, referToA1Offset as int, 0)
  }

  def addReferToA2(builder FlatBuffers.Builder, referToA2Offset FlatBuffers.Offset<NamespaceA.SecondTableInA>) {
    builder.addFieldOffset(1, referToA2Offset as int, 0)
  }

  def endTableInC(builder FlatBuffers.Builder) FlatBuffers.Offset<NamespaceC.TableInC> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<NamespaceC.TableInC>
  }
}

type NamespaceA.SecondTableInA : int {
  def referToC(bb FlatBuffers.ByteBuffer) NamespaceC.TableInC {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readIndirect((self as int) + offset) as NamespaceC.TableInC : .NULL
  }
}

namespace NamespaceA.SecondTableInA {
  const NULL = 0 as NamespaceA.SecondTableInA

  def getRootAsSecondTableInA(bb FlatBuffers.ByteBuffer) SecondTableInA {
    return (bb.readInt32(bb.position) + bb.position) as SecondTableInA
  }

  def startSecondTableInA(builder FlatBuffers.Builder) {
    builder.startObject(1)
  }

  def addReferToC(builder FlatBuffers.Builder, referToCOffset FlatBuffers.Offset<NamespaceC.TableInC>) {
    builder.addFieldOffset(0, referToCOffset as int, 0)
  }

  def endSecondTableInA(builder FlatBuffers.Builder) FlatBuffers.Offset<NamespaceA.SecondTableInA> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<NamespaceA.SecondTableInA>
  }
}
