# This was automatically generated by the FlatBuffers compiler, do not modify

type NamespaceA.NamespaceB.EnumInNestedNS = int

namespace NamespaceA.NamespaceB.EnumInNestedNS {
  const A = 0 as NamespaceA.NamespaceB.EnumInNestedNS
  const B = 1 as NamespaceA.NamespaceB.EnumInNestedNS
  const C = 2 as NamespaceA.NamespaceB.EnumInNestedNS
}

type NamespaceA.NamespaceB.TableInNestedNS : int {
  def foo(bb FlatBuffers.ByteBuffer) int {
    var offset = bb.readOffset(self as int, 4)
    return offset != 0 ? bb.readInt32((self as int) + offset) : 0
  }
}

namespace NamespaceA.NamespaceB.TableInNestedNS {
  const NULL = 0 as NamespaceA.NamespaceB.TableInNestedNS

  def getRootAsTableInNestedNS(bb FlatBuffers.ByteBuffer) TableInNestedNS {
    return (bb.readInt32(bb.position) + bb.position) as TableInNestedNS
  }

  def startTableInNestedNS(builder FlatBuffers.Builder) {
    builder.startObject(1)
  }

  def addFoo(builder FlatBuffers.Builder, foo int) {
    builder.addFieldInt32(0, foo, 0)
  }

  def endTableInNestedNS(builder FlatBuffers.Builder) FlatBuffers.Offset<NamespaceA.NamespaceB.TableInNestedNS> {
    var offset = builder.endObject
    return offset as FlatBuffers.Offset<NamespaceA.NamespaceB.TableInNestedNS>
  }
}

type NamespaceA.NamespaceB.StructInNestedNS : int {
  def a(bb FlatBuffers.ByteBuffer) int {
    return bb.readInt32((self as int) + 0)
  }

  def b(bb FlatBuffers.ByteBuffer) int {
    return bb.readInt32((self as int) + 4)
  }
}

namespace NamespaceA.NamespaceB.StructInNestedNS {
  const NULL = 0 as NamespaceA.NamespaceB.StructInNestedNS

  def createStructInNestedNS(builder FlatBuffers.Builder, a int, b int) FlatBuffers.Offset<NamespaceA.NamespaceB.StructInNestedNS> {
    builder.prep(4, 8)
    builder.writeInt32(b)
    builder.writeInt32(a)
    return builder.offset as FlatBuffers.Offset<NamespaceA.NamespaceB.StructInNestedNS>
  }
}
